#!/bin/bash

# House Price Predictor Infrastructure Deployment Script

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üèóÔ∏è  House Price Predictor Infrastructure Deployment${NC}"
echo "=================================================="

# Configuration
ENVIRONMENT="dev"
AWS_REGION="eu-west-1"
AWS_ACCOUNT_ID="495599742316"

# Check prerequisites
echo -e "${YELLOW}üîç Checking prerequisites...${NC}"

if ! command -v terraform &> /dev/null; then
    echo -e "${RED}‚ùå Terraform is not installed${NC}"
    echo "Install from: https://www.terraform.io/downloads.html"
    exit 1
fi

if ! command -v aws &> /dev/null; then
    echo -e "${RED}‚ùå AWS CLI is not installed${NC}"
    echo "Install from: https://aws.amazon.com/cli/"
    exit 1
fi

# Check AWS credentials
echo -e "${YELLOW}üîê Checking AWS credentials...${NC}"
if ! aws sts get-caller-identity --profile mlops-profile &> /dev/null; then
    echo -e "${RED}‚ùå AWS credentials not configured for mlops-profile${NC}"
    echo "Run: aws configure --profile mlops-profile"
    exit 1
fi

# Set AWS profile
export AWS_PROFILE=mlops-profile

echo -e "${GREEN}‚úÖ Prerequisites check passed${NC}"

# Navigate to environment directory
cd environments/${ENVIRONMENT}

# Initialize Terraform (skip backend for now)
echo -e "${YELLOW}üîß Initializing Terraform...${NC}"
terraform init -backend=false

# Validate configuration
echo -e "${YELLOW}üîç Validating Terraform configuration...${NC}"
terraform validate

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Terraform validation failed${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Terraform validation passed${NC}"

# Plan deployment
echo -e "${YELLOW}üìã Creating deployment plan...${NC}"
terraform plan -var="aws_account_id=${AWS_ACCOUNT_ID}" -out=tfplan

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Terraform plan failed${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Deployment plan created${NC}"

# Ask for confirmation
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Ready to deploy infrastructure. This will create:${NC}"
echo "  ‚Ä¢ VPC with public/private subnets"
echo "  ‚Ä¢ ECS Fargate cluster"
echo "  ‚Ä¢ Application Load Balancer"
echo "  ‚Ä¢ Security Groups"
echo "  ‚Ä¢ IAM roles"
echo "  ‚Ä¢ Service Discovery"
echo ""
read -p "Do you want to proceed with deployment? (y/N): " -n 1 -r
echo ""

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}‚è∏Ô∏è  Deployment cancelled${NC}"
    exit 0
fi

# Apply deployment
echo -e "${YELLOW}üöÄ Deploying infrastructure...${NC}"
terraform apply tfplan

if [ $? -eq 0 ]; then
    echo ""
    echo -e "${GREEN}üéâ Infrastructure deployed successfully!${NC}"
    echo ""
    echo -e "${BLUE}üìã Deployment Summary:${NC}"
    echo "  ‚Ä¢ Environment: ${ENVIRONMENT}"
    echo "  ‚Ä¢ Region: ${AWS_REGION}"
    echo "  ‚Ä¢ Account: ${AWS_ACCOUNT_ID}"
    echo ""
    echo -e "${BLUE}üîó Outputs:${NC}"
    terraform output
    echo ""
    echo -e "${YELLOW}üí° Next Steps:${NC}"
    echo "  1. Push your Docker images to ECR (GitHub Actions will do this)"
    echo "  2. ECS services will automatically pull and deploy the images"
    echo "  3. Access your UI via the ALB DNS name shown above"
    echo ""
    echo -e "${GREEN}‚ú® Your MLOps infrastructure is ready!${NC}"
else
    echo -e "${RED}‚ùå Infrastructure deployment failed${NC}"
    exit 1
fi